# Root = Diplomatic Play
on_babylon_contain_threat_diplo_play_war_start = {
	effect = {
		if = {
			limit = {
				has_play_goal = contain_threat
			}
			every_country = {
				limit = {
					has_variable = pariah_coalition_member
					has_strategic_adjacency = root.target
					NOT = {
						is_diplomatic_play_enemy_of = root.target
					}
				}
				add_modifier = {
					name = scared_of_pariah_prestige_loss
					months = normal_modifier_time
					is_decaying = yes
				}
			}
		}
	}
}
# Root = Diplomatic Play
on_babylon_diplo_play_backdown = {
	effect = {
		if = {
			#If somebody backs down while nobody has joined the original customs union play....
			limit = {
				is_diplomatic_play_type = dp_babylon_customs_union
				OR = {
					initiator_is = scope:actor
					target_is = scope:actor
				}
			}
			initiator = {
				save_scope_as = overlord_scope
				remove_list_variable = {
					name = babylon_new_customs_union_overlord
					target = root.target
				}
			}
			target = {
				remove_diplomatic_pact = {
					country = scope:overlord_scope
					type = customs_union
				}
				save_scope_as = applicant_scope
				remove_variable = babylon_new_customs_union_applicant
				set_variable = {
					name = babylon_new_customs_union_applicant_denied
					value = 1
					days = 1826	#5 years
				}
			}
			#Removes the humiliation since end_play = yes doesnt work (in current 1.2.1 beta?)
			scope:actor = {
				trigger_event = {
					id = babylon_new_customs_union.4
					days = 1
				}
			}
			#creates truces to simulate the ending of a play... 
			scope:overlord_scope = {
				create_truce = {
					country = scope:applicant_scope
					months = 60
				}
			}
		}
		if = {
			#If 
			limit = {
				#Play is dp_liberate_subject 
				is_diplomatic_play_type = dp_liberate_subject
				#And the target is an applicant
				target = {
					has_variable = babylon_new_customs_union_applicant
				}
				#Assume its the 2nd stage of dp_babylon_customs_union
			}
			target = {
				#Get the customs union overlord (from the applicant var that points at overlord)
				var:babylon_new_customs_union_applicant = {
					save_scope_as = overlord_scope
				}
				#Clear a variable from the applicant (that points at overlord)
				remove_variable = babylon_new_customs_union_applicant
			}
			#remove applicant from overlords list
			scope:overlord_scope = {
				remove_list_variable = {
					name = babylon_new_customs_union_overlord
					target = root.target
				}
			}
			if = {
				limit = {
					#Check if the backdowner (lol) is the target/applicant
					target_is = scope:actor
				}
				#If it is...
				target = {
					if = {
						#Remove customs union, if it exists
						limit = {
							has_diplomatic_pact = {
								who = scope:overlord_scope
								type = customs_union
							}
						}
						remove_diplomatic_pact = {
							country = scope:overlord_scope
							type = customs_union
						}
					}
					#Add a 5 year cooldown to adding the applicant to a customs union
					set_variable = {
						name = babylon_new_customs_union_applicant_denied
						value = 1
						days = 1826	#5 years
					}
				}
			}
		}
	}
}
# Root = Diplomatic Play
on_babylon_play_join_side = {
	effect = {
		if = {
			limit = {
				#Upon someone joining the customs union play on the side of the applicant...
				is_diplomatic_play_type = dp_babylon_customs_union
				NOT = {
					has_variable = someone_objected
				}
				any_scope_target_ally = {
					this = scope:actor
				}
			}
			#So it only fires once
			#Cleans itself up after 7 days
			set_variable = {
				name = someone_objected
				value = 1
				days = 7
			}
			#Add the overlord allies to a variable list in the applicant
			every_scope_initiator_ally = {
				root.target = {
					add_to_variable_list = {
						name = custom_union_overlord_backers
						target = prev
					}
				}
			}
			end_play = yes
			scope:actor = {
				create_diplomatic_play = {
					type = dp_liberate_subject
					target_country = root.target
					add_target_backers = {
						root.initiator
					}
					add_war_goal = {
						holder = scope:actor
						type = humiliation
						target_country = root.initiator
					}
				}
			}
		}
	}
}
